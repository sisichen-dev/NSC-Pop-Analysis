%% -----------------------------------------------------------
% Read in data
% ------------------------------------------------------------

counts = csvread('counts_n.csv'); % total cell counts after gmm model query
uniquemeta = readtable('signals_conc.csv'); % concentrations
signalsx = csvread('signals_x.csv'); % normalized concentrations

im = uniquemeta.Variables;
im = im(:,2:end);
ylabels = uniquemeta.Properties.VariableNames(2:end);

% define absolute proportions and relative proportions
aprop = (counts'./sum(counts'))'
rprop = counts ./ counts(:,3); % relative to population NP (pre-neuro)

popnames = {'pre-astro', 'comm. neuro.', 'pre-neuro'}

% Specify a metadata ordering that will work for most cases
sampleorder = [1,4,7,2,5,8,3,6,9,38,34,40,39,28,22,...
    1,13,10,2,14,11,3,15,12,33,...
    16,17,18,32,...
    3,...
    25,35,31,29,23,...
    26,27,30,29,20,...
    19,21,24,23,20]

test = brewermap(40,'Set2');
newcollist = [test(1,:); test(4,:); test(2,:)];


%% -----------------------------------------------------------
% Compute the Growth Rate model based on gradient ascent
% ------------------------------------------------------------

[num_type, num_round] = size(counts'); 
num_input = size(signalsx, 2) + 1; % the extra dimension is the constant term in the model 

rng(0)
data_input = cat(1, signalsx', ones(1, num_round)); % all ones vector for the constant term 
sample_dist = counts' ./ sum(counts, 2)'; % distribution of samples 

cur_beta = zeros(num_type, num_input); % initial value of beta 
step_sz = 1;
num_step = 200;
rec_grad = zeros(num_step, 1); % record gradient for record

for ii = 1: 200
    cstep_sz = step_sz / sqrt(ii); % stepsize decay as the square root of steps
    cur_grad = grad_beta(sample_dist, data_input, cur_beta); % compute gradient of log likelihood
    cur_beta = cur_beta + cstep_sz * cur_grad; % gradient ascent update 
    rec_grad(ii) = norm(cur_grad);
end

para_dist = model_dist(cur_beta, data_input); % distribution generated by learned parameters

cur_beta = cur_beta'
signalsx2 = data_input'

%% -----------------------------------------------------------
% FIG 4c. Growth Rate model: relative proportions, all data
% ------------------------------------------------------------
% 
% X2 = [ones(40,1), X]; % add column for bias
% 
% % Solve the model on all data
% C =  X2 \ log(rprop);


figure; imagesc(cur_beta(1:end,1:2))
colormap(brewermap(21,'RdBu'))
title('coefficients')
caxis([-1.5,1.5])
c=colorbar();
c.Label.String = 'coefficient value';
xtickangle(45)
set(gca,'YTick', 1:8, 'YTickLabel', {'EGF/FGF ( \beta_{k,1} )', 'BMP4 (  \beta_{k,2} )', 'PDGF-AA ( \beta_{k,3} )', 'CHIR ( \beta_{k,4} )',  'FGF9 ( \beta_{k,5} )', 'GM-CSF ( \beta_{k,6} )', 'IFNG ( \beta_{k,7} )','bias ( \beta_{k,0} ) '})
set(gca,'Xtick', 1:3, 'XTickLabel', {'AP','CN','NP'})
set(gcf, 'Position',[440   525   315   273]);
set(gca,'FontSize',16);
print(['growth_model_coefficients_grad_ascent.pdf'], '-dpdf','-r300')

%% -----------------------------------------------------------
% FIG 4c. Calculate simulated numbers
% ------------------------------------------------------------

growth_sim_p = para_dist'

%% -----------------------------------------------------------
% FIG 4e. quantitative error for growth model
% ------------------------------------------------------------
sigmoid_p_mse = sqrt(mean(mean((growth_sim_p - aprop).^2))) % 10.86%
sigmoid_p_l1e = mean(mean(abs(growth_sim_p -aprop))) % 6.58

%% -----------------------------------------------------------
% FIG 4b: Plot log(ratios) for growth model
% ------------------------------------------------------------
% make gradient only 
xvals1 = [-0.5:0.075:1.5'];
yvals1= [-0.5:0.075:1.5'];
[X1,Y1]=meshgrid(xvals1',yvals1');
x1=reshape(X1',[],1);
y1=reshape(Y1',[],1);
pairs1 = [x1,y1];
numrows = size(pairs1,1);
zeromat = zeros(numrows,5);
onesmat = ones(numrows,1);
pairs1 = [pairs1,zeromat,onesmat];

% growth model equations for ratio
sim_ratio_array = pairs1*cur_beta;
aprop_ratio = log(aprop./aprop(:,3));
sim_ratio_predict = signalsx2*cur_beta;

for ind = 1:2
    figure; scatter3(x1,y1,sim_ratio_array(:,ind),10,[0.3,0.3,0.3], 'filled','MarkerFaceAlpha',0.5); hold on;
    scatter3(signalsx(1:9,1),signalsx(1:9,2),aprop_ratio(1:9,ind),100,'r','filled')
    for j=1:9
        line([signalsx(j,1),signalsx(j,1)],[signalsx(j,2),signalsx(j,2)], [aprop_ratio(j,ind), sim_ratio_predict(j,ind)],'LineWidth',1.5)
    end
    xlabel('EGF/FGF');
    ylabel('BMP4');
    zlabel(['log( ', popnames{ind},'/pre-neuro )'])
    set(gcf,'pos',[2261         228         327         247])
    set(gca,'FontSize',12)
    %print(['growth_model_linear_regime_ratios_',popnames{ind},'.pdf'], '-dpdf','-r300')
end

%% -----------------------------------------------------------
% FIG 4c. Plot together with percentages
% ------------------------------------------------------------

% bootstrap samples from original counts 
bcounts = []; % bootstrapped counts
ncounts = 25;
sampleidx = [];

for n = 1:20
    for i=1:size(counts,1)
        currcounts = counts(i,:);
        % make a vector reflecting the counts of the current sample
        svector = [];
        for j=1:size(currcounts,2)
            svector = [svector, repmat(j,1,currcounts(j))];
        end

        currbootstrap = datasample(svector,ncounts,2,'Replace',false);

        currbcount = [];
        % count the number of times each element occurs
        for j=1:size(currcounts,2)
            currbcount = [currbcount, sum(currbootstrap==j)];
        end

        bcounts = [bcounts;currbcount];
        sampleidx = [sampleidx, i];
    end
end

% convert bootstrapped counts to proportions
sampled_aprops = (bcounts'./sum(bcounts'))'

sim_ratio = exp(signalsx2*cur_beta); 
sim_n = sim_ratio .* counts(:,3);
sim_n_p = sim_n ./ sum(sim_n')';
% plot together

figure;
axlist=[];
n=3
for i=1:3
    axlist(i) = subplot(n+1,1,i);
    errorplot(sampleidx, sampled_aprops(:,i),sampleorder,'Color', [0.4,0.4,0.4],'LineWidth', 0.75); hold on;
    plot(1:length(sampleorder),sim_n_p(sampleorder,i),'LineWidth',1.5, 'Color', newcollist(i,:))
    upperlim = max(max(sampled_aprops(i,:)),0.88);
    ylim([0,upperlim])
    %set(gca, 'XTick', 1:length(sampnums), 'XTickLabel',sampnums);
    set(gca, 'XTick', []);
    ylabel(popnames{i})
    colorbar('eastOutside')
    box off
end
axh=subplot(n+1,1,n+1);
colormap(brewermap(12,'BuPu'))
imagesc(signalsx2(sampleorder,1:end-1)')
set(gca, 'YTick', 1:length(ylabels), 'YTickLabel', ylabels, 'TickLabelInt', 'none')
colorbar('eastoutside')

%set(gca, 'XTick', 1:length(sampnums), 'XTickLabel',sampnums);
%set(gca, 'XTick', []);
xlabel('sample number')
linkaxes([axlist,axh],'x')
set(gcf,'pos', [440   439   371   359])
% print('model_vs_data.pdf', '-dpdf', '-r300')


%% -----------------------------------------------------------
% FIG 4e. Design figure
% ------------------------------------------------------------

designidx = [1,2,3,6,9,40,22];
predictedvals = sim_n_p(designidx,:);

figure; 
subplot(2,1,1);
bar(aprop(designidx,2),'FaceColor',[0.75,0.75,0.75]); hold on;
plot(predictedvals(:,2),'LineWidth',3,'Color',newcollist(2,:))
ylabel('proportion CN')
box off
line([0,8],[0.72,0.72],'Color',[0.5,0.5,0.5],'LineWidth',2)

subplot(2,1,2);
bar(aprop(designidx,1),'FaceColor',[0.75,0.75,0.75]); hold on;
plot(predictedvals(:,1),'LineWidth',3,'Color',newcollist(1,:))
ylabel('proportion AP')
box off
line([0,8],[0.124,0.124],'Color',[0.5,0.5,0.5],'LineWidth',2)

set(gcf,'pos',[440   253   207   323])
% print('design_figure.pdf', '-dpdf', '-r300')

